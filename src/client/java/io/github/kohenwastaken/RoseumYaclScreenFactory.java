package io.github.kohenwastaken;

import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.BooleanControllerBuilder;
import dev.isxander.yacl3.api.controller.EnumControllerBuilder;
import dev.isxander.yacl3.api.controller.IntegerSliderControllerBuilder;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;

@Environment(EnvType.CLIENT)
public final class RoseumYaclScreenFactory {

    private RoseumYaclScreenFactory() {}

    @SuppressWarnings("deprecation")
	public static Screen create(Screen parent) {
        final var cfg = RoseumConfig.INSTANCE;

        // ===== CRAFTING – ALLOY =====
        Option<Boolean> craftingAlloyEnabled = Option.<Boolean>createBuilder()
                .name(Text.literal("Alloy Crafting Recipes"))
                .description(OptionDescription.of(Text.literal("Enable or disable Rose Gold alloy crafting recipes generated by the mod")))
                .binding(cfg.enableCraftingAlloy, () -> cfg.enableCraftingAlloy, v -> cfg.enableCraftingAlloy = v)
                .controller(BooleanControllerBuilder::create)
                .build();

        Option<RoseumConfig.Mode> modeOpt = Option.<RoseumConfig.Mode>createBuilder()
                .name(Text.literal("Alloy Mode"))
                .description(OptionDescription.of(Text.literal("How many copper and gold are required for alloy crafting recipes (total 4)")))
                .binding(cfg.mode, () -> cfg.mode, v -> cfg.mode = v)
                .controller(opt -> EnumControllerBuilder.create(opt)
                        .enumClass(RoseumConfig.Mode.class)
                        .formatValue(m -> switch (m) {
                            case C3_G1 -> Text.literal("3 Copper 1 Gold");
                            case C2_G2 -> Text.literal("2 Copper 2 Gold");
                            case C1_G3 -> Text.literal("1 Copper 3 Gold");
                        }))
                .available(cfg.enableCraftingAlloy)
                .build();

        Option<RoseumConfig.InputKind> inputOpt = Option.<RoseumConfig.InputKind>createBuilder()
                .name(Text.literal("Allowed Inputs"))
                .description(OptionDescription.of(Text.literal("Which item forms are accepted by alloy crafting recipes")))
                .binding(cfg.inputKind, () -> cfg.inputKind, v -> cfg.inputKind = v)
                .controller(opt -> EnumControllerBuilder.create(opt)
                        .enumClass(RoseumConfig.InputKind.class)
                        .formatValue(k -> switch (k) {
                            case INGOT -> Text.literal("Ingots Only");
                            case RAW   -> Text.literal("Raw Ores Only");
                            case BOTH  -> Text.literal("Both");
                        }))
                .available(cfg.enableCraftingAlloy)
                .build();

        Option<Integer> countOpt = Option.<Integer>createBuilder()
                .name(Text.literal("Output Count"))
                .description(OptionDescription.of(Text.literal("How many items the crafting recipe outputs")))
                .binding(cfg.outputCount, () -> cfg.outputCount, v -> cfg.outputCount = v)
                .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                        .range(1, 4)
                        .step(1)
                        .formatValue(i -> Text.literal(Integer.toString(i))))
                .available(cfg.enableCraftingAlloy)
                .build();
        
        craftingAlloyEnabled.addListener((opt, event) -> {
            boolean on = opt.pendingValue(); // YACL 3.6+ - yeni API
            modeOpt.setAvailable(on);
            inputOpt.setAvailable(on);
            countOpt.setAvailable(on);
        });

        OptionGroup craftingGroup = OptionGroup.createBuilder()
                .name(Text.literal("Crafting – Alloy"))
                .option(craftingAlloyEnabled)
                .option(modeOpt)
                .option(inputOpt)
                .option(countOpt)
                .build();

        ConfigCategory craftingCat = ConfigCategory.createBuilder()
                .name(Text.literal("Crafting"))
                .group(craftingGroup)
                .build();

        // ===== SMITHING – ALLOY =====
        Option<Boolean> smithAlloyEnabled = Option.<Boolean>createBuilder()
                .name(Text.literal("Alloy Smithing"))
                .description(OptionDescription.of(Text.literal("Enable or disable the smithing alloy recipe \n(1 Copper + 1 Gold → 1 Rose Gold Ingot)")))
                .binding(cfg.enableSmithingAlloy, () -> cfg.enableSmithingAlloy, v -> cfg.enableSmithingAlloy = v)
                .controller(BooleanControllerBuilder::create)
                .build();

        Option<RoseumConfig.TemplatePolicy> smithAlloyPolicy = Option.<RoseumConfig.TemplatePolicy>createBuilder()
                .name(Text.literal("Template Behavior"))
                .description(OptionDescription.of(Text.literal(
                        "What happens to the template after smithing: \n \n" +
                        "• OFF — No template required \n \n" +
                        "• Dont Consume — Template is required but never consumed \n \n" +
                        "• Consume — Vanilla behavior  \n \n" +
                        "• Durability — If damageable, takes 1 damage; otherwise returned"
                )))
                .binding(cfg.smithingAlloy_templatePolicy,
                        () -> cfg.smithingAlloy_templatePolicy,
                        v  -> cfg.smithingAlloy_templatePolicy = v)
                .controller(opt -> EnumControllerBuilder.create(opt)
                        .enumClass(RoseumConfig.TemplatePolicy.class)
                        .formatValue(p -> switch (p) {
                        	case OFF -> Text.literal("OFF");
                        	case DO_NOT_CONSUME -> Text.literal("Dont Consume");
                        	case DAMAGE -> Text.literal("Durability");
                        	case CONSUME -> Text.literal("Consume");
                        	default -> Text.literal("OFF");
                        }))
                .available(cfg.enableSmithingAlloy)
                .build();
        
        smithAlloyEnabled.addListener((opt, event) -> {
            boolean on = opt.pendingValue();
            smithAlloyPolicy.setAvailable(on);
        });

        OptionGroup smithAlloyGroup = OptionGroup.createBuilder()
                .name(Text.literal("Alloy Smithing ( Copper + Gold → Rose Gold Ingot)"))
                .option(smithAlloyEnabled)
                .option(smithAlloyPolicy)
                .build();

        // ===== SMITHING – TRANSFORM =====
        Option<Boolean> smithTransEnabled = Option.<Boolean>createBuilder()
                .name(Text.literal("Smithing Upgrade"))
                .description(OptionDescription.of(Text.literal("Enable or disable armor transform (e.g., Gold Armor + Copper → Rose Gold Armor).")))
                .binding(cfg.enableSmithingTransform, () -> cfg.enableSmithingTransform, v -> cfg.enableSmithingTransform = v)
                .controller(BooleanControllerBuilder::create)
                .build();

        Option<RoseumConfig.TemplatePolicy> smithTransPolicy = Option.<RoseumConfig.TemplatePolicy>createBuilder()
                .name(Text.literal("Template Behavior"))
                .description(OptionDescription.of(Text.literal(
                		"What happens to the template after transforming: \n \n" +
                        "• OFF — No template required \n \n" +
                        "• Dont Consume — Template is required but never consumed \n \n" +
                        "• Consume — Vanilla behavior  \n \n" +
                        "• Durability — If damageable, takes 1 damage; otherwise returned"
                )))
                .binding(cfg.smithingTransform_templatePolicy,
                        () -> cfg.smithingTransform_templatePolicy,
                        v  -> cfg.smithingTransform_templatePolicy = v)
                .controller(opt -> EnumControllerBuilder.create(opt)
                        .enumClass(RoseumConfig.TemplatePolicy.class)
                        .formatValue(p -> switch (p) {
                        	case OFF -> Text.literal("OFF");
                        	case DO_NOT_CONSUME -> Text.literal("Dont Consume");
                        	case DAMAGE -> Text.literal("Durability");
                        	case CONSUME -> Text.literal("Consume");
                        	default -> Text.literal("OFF");
                        }))
                .available(cfg.enableSmithingTransform)
                .build();
        
        smithTransEnabled.addListener((opt, event) -> {
            boolean on = opt.pendingValue();
            smithTransPolicy.setAvailable(on);
        });

        OptionGroup smithTransformGroup = OptionGroup.createBuilder()
                .name(Text.literal("Smithing Upgrade (Gold Armor + Copper → Rose Gold Armor)"))
                .option(smithTransEnabled)
                .option(smithTransPolicy)
                .build();

        ConfigCategory smithingCat = ConfigCategory.createBuilder()
                .name(Text.literal("Smithing"))
                .group(smithAlloyGroup)
                .group(smithTransformGroup)
                .build();

        // ===== Save callback =====
        Runnable saver = () -> {
            cfg.outputCount = Math.max(1, Math.min(4, cfg.outputCount));
            RoseumConfig.savePretty();

            var mc = MinecraftClient.getInstance();
            if (mc.player != null) {
                mc.player.sendMessage(
                        Text.literal("[Roseum] Config saved. Use /reload (or re-enter world) to apply recipe changes."),
                        false
                );
            }
        };

        return YetAnotherConfigLib.createBuilder()
                .title(Text.literal("Roseum Config"))
                .category(craftingCat)
                .category(smithingCat)
                .save(saver)
                .build()
                .generateScreen(parent);
    }
}
